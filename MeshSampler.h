#ifndef MESH_H
#define MESH_H

//----------------------------------------------------------------------------------------------------------------------
/// @file Mesh.h
/// @author Maria Vineeta Bagya Seelan
/// @version 1.0
/// @date 16/08/13
/// Revision History :
/// Initial Version 16/08/13
/// @class Mesh
/// @brief the Mesh class holds all members and functions needed to load a mesh
/// @brief and generate sample points within it
//----------------------------------------------------------------------------------------------------------------------

#include "ngl/TransformStack.h"
#include "ngl/Camera.h"
#include "ngl/VAOPrimitives.h"
#include "ngl/Obj.h"
#include "Delaunay.h"

class MeshSampler
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for Mesh class
    //----------------------------------------------------------------------------------------------------------------------
    MeshSampler();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor for Mesh class
    //----------------------------------------------------------------------------------------------------------------------
    ~MeshSampler(){}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that loads the mesh initially
    //----------------------------------------------------------------------------------------------------------------------
    void loadMesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that obtains volume samples of the mesh using Ray casting
    //----------------------------------------------------------------------------------------------------------------------
    void SampleMesh();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that obtains volume samples of the mesh using SDF
    //----------------------------------------------------------------------------------------------------------------------
    void SampleMesh_usingSDF();
    void SampleMesh_rayIntersection();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that plots the points insided the volume of the mesh
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawVolumePoints(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that plots the points on the surface of the mesh
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawSurfaceMeshPoints(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the intersection points
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawHitPoints(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that plots the surface points on the mesh
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawVoronoiVertices(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that plots the surface points on the BBox
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawSurfacePointsBBox(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the Bounding Box
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawBBox(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the Mesh
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawMesh(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the Tetrahedron
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawTetrahedron(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the voronoi diagram
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void drawVoronoi(ngl::TransformStack &_transformStack, ngl::Camera *_cam);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that does the actual Delaunay calculation
    //----------------------------------------------------------------------------------------------------------------------
    void delaunay();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that sets the Obj file name
    /// @param [in] _filename stores the filename
    //----------------------------------------------------------------------------------------------------------------------
    void setObjFilename( const std::string _filename );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that sets the density of points
    /// @param [in] _density stores the density obtained from UI
    //----------------------------------------------------------------------------------------------------------------------
    void setDensity(int _density);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that sets the location of points
    /// @param [in] _type stores the value to be set
    //----------------------------------------------------------------------------------------------------------------------
    void setPointLocationType(int _type);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that sets the sampling method
    /// @param [in] _type stores the value to be set
    //----------------------------------------------------------------------------------------------------------------------
    void setMethod(int _type);

protected:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to load the tx stack (+MVP) to the colour shader
    /// @param [in] _transformStack stores the transformation stack
    /// @param [in] _cam stores the camera data
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToColourShader(ngl::TransformStack &_transformStack, ngl::Camera *_cam);

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the surface points of the BBox
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_surfacePointsBBox;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the surface points on Mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_surfacePointsMesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the starting point of the ray
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_rayStart;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the end point of the ray
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_rayEnd;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the volume points obtained by sampling the mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_volumePoints;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the surface/volume points obtained by sampling the mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_points;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the intersection points betweenray and mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_hitPoints;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the list of vertices of Mesh
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_vertTri;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our model
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Obj *m_mesh;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the tetrahedrons generated
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Tetrahedron*> m_tetrahedra;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the voronoi cells generated
    //----------------------------------------------------------------------------------------------------------------------
    Voronoi* m_voronoi;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the mane of the mesh/obj selected in UI
    //----------------------------------------------------------------------------------------------------------------------
    std::string m_objfilename;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the density selected from UI
    //----------------------------------------------------------------------------------------------------------------------
    int m_density;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the value that describes the location of the points Surface/Volume
    //----------------------------------------------------------------------------------------------------------------------
    int m_ptLocation;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the sample points creation method
    //----------------------------------------------------------------------------------------------------------------------
    int m_method;

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that calculates the intersection points between ray and the mesh
    //----------------------------------------------------------------------------------------------------------------------
    void rayTriangleIntersect();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that calculates random points on the BBox
    //----------------------------------------------------------------------------------------------------------------------
    void findPointsOnSurfaceBBox();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that calculates random points on mesh surface
    /// @param [in] _triangle stores the triangulated information of the mesh
    //----------------------------------------------------------------------------------------------------------------------
    void findPointsOnSurfaceMesh( Point3 _triangle );

};


#endif // MESH_H
