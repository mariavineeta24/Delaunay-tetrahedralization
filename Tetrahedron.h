#ifndef TETRAHEDRON_H
#define TETRAHEDRON_H

//----------------------------------------------------------------------------------------------------------------------
/// @file Tetrahedron.h
/// @author Maria Vineeta Bagya Seelan
/// @version 1.0
/// @date 16/08/13
/// Revision History :
/// Initial Version 16/08/13
/// @class Tetrahedron
/// @brief This is the class that defines the functions required to construct a tetrahedron
//----------------------------------------------------------------------------------------------------------------------

#include "ngl/Vec3.h"
#include "ngl/VertexArrayObject.h"
#include "ngl/Colour.h"

//----------------------------------------------------------------------------------------------------------------------
/// @class Face
/// @brief simple class used to encapsulate a single face of a tetrahedron
//----------------------------------------------------------------------------------------------------------------------
class Face
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief The vertices index
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<unsigned long int> m_vert;
};

class Tetrahedron
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for Tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    Tetrahedron();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for Tetrahedron
    /// @param [in] _vertexArray the array of vertices required to construct the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    Tetrahedron( std::vector<ngl::Vec3> _vertexArray );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for Tetrahedron
    /// @param [in] _a vertex A required to construct the tetrahedron
    /// @param [in] _b vertex B required to construct the tetrahedron
    /// @param [in] _c vertex C required to construct the tetrahedron
    /// @param [in] _d vertex D required to construct the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    Tetrahedron( ngl::Vec3 _a, ngl::Vec3 _b, ngl::Vec3 _c, ngl::Vec3 _d );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Destructor for Tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    ~Tetrahedron();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor for the vertex data
    /// @returns a std::vector containing the vert data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> getVertexData(){ return m_verts; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor for the Face data
    /// @returns a std::vector containing the face data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector <Face> getFaceData(){ return m_face; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to get the Circumsphere radius
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Real getCirRadius()const { return m_circumradius; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to get the Circumcenter
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Vec3 getCirCenter()const { return m_circumcenter; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief accessor to get the Tetrahedron colour
    //----------------------------------------------------------------------------------------------------------------------
    inline ngl::Colour getColour()const { return m_tetraColour; }
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that draws the terahedron
    //----------------------------------------------------------------------------------------------------------------------
    void draw();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Creates vertex array object for the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    void createVAO();

public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the four tetrahedron nieghbours adjacent to the current tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    Tetrahedron* m_neighbours[4];
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief is true if the tetrahedron is flipped or modified
    //----------------------------------------------------------------------------------------------------------------------
    bool m_modified;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores the unique id of the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    int m_tetid;

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Pointer to the Vertex list
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<ngl::Vec3> m_verts;
        //----------------------------------------------------------------------------------------------------------------------
    /// @brief Pointer to the Face list
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<Face> m_face;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Center of the circumsphere
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_circumcenter;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Radius of the circumsphere
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Real m_circumradius;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Flag to indicate if a VBO has been created
    //----------------------------------------------------------------------------------------------------------------------
    bool m_vao;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief A pointer to our VBO data
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vboBuffers;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief id for our vertexArray object
    //----------------------------------------------------------------------------------------------------------------------
    ngl::VertexArrayObject *m_vaoTetrahedron;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Size of the vbo data
    //----------------------------------------------------------------------------------------------------------------------
    unsigned int m_tetrahedronSize;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Colour of the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Colour m_tetraColour;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores value needed for calculating the center and radius
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_formulaN;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief stores value needed for calculating the center and radius
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Real m_formulaD;

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that sets the faces according to the vertex index
    //----------------------------------------------------------------------------------------------------------------------
    void createFaces();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that randomly sets the colour of the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    void setColour();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method that calculates the circumcenter of the tetrahedron
    //----------------------------------------------------------------------------------------------------------------------
    void findCenter();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that calculates the radius of the circumsphere
    //----------------------------------------------------------------------------------------------------------------------
    void findRadius();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief function that calculates the formula required to find the circumcenter and radius
    //----------------------------------------------------------------------------------------------------------------------
    void calculateFormula();
};

#endif // TETRAHEDRON_H
